#!/usr/bin/env python

from collections import OrderedDict
import argparse
import glob
import json
import os
import string
import subprocess
import sys
import urllib2
import warnings
import zipfile
import distutils.dir_util

root_path = os.path.abspath('.')
default_json_file_path = root_path + '/cppdock.json'
default_dep_path = "https://github.com/" 

def parse_args_command(args):
    parser = argparse.ArgumentParser(add_help=False)
    parser.add_argument('command',      choices   = [
                                                        'init',
                                                        'build',
                                                        'dev',
                                                        'install_dep',
                                                        'install_src',
                                                    ])
    return parser.parse_args(args)

def parse_args_init(args):
    parser = argparse.ArgumentParser(prog='cppdock init')
    parser.add_argument('-f', '--file', dest      = 'json_file_path',
                                        default   = default_json_file_path,
                                        help      = 'Specify path to json file')

    return parser.parse_args(args)

def parse_args_build(args):
    parser = argparse.ArgumentParser(prog='cppdock build')
    parser.add_argument('-f', '--file', dest      = 'json_file_path',
                                        default   = default_json_file_path,
                                        help      = 'Specify path to json file')

    parser.add_argument('--print-only', dest      = 'print_only',
                                        action    = 'store_true',
                                        help      = 'Print Dockerfile without building')

    group  = parser.add_argument_group('required arguments')
    group.add_argument('platform',      help      = 'Name of target platform')

    return parser.parse_args(args)

def parse_args_dev(args):
    parser = argparse.ArgumentParser(prog='cppdock dev')
    parser.add_argument('-f', '--file', dest      = 'json_file_path',
                                        default   = default_json_file_path,
                                        help      = 'Specify path to json file')

    group  = parser.add_argument_group('required arguments')
    group.add_argument('platform',      help      = 'Name of target platform')

    return parser.parse_args(args)

def parse_args_install_dep(args):
    parser = argparse.ArgumentParser(prog='cppdock install_dep')
    group  = parser.add_argument_group('required arguments')
    group.add_argument('platform',      help      = 'Token for target platform')
    group.add_argument('branch',        help      = 'SHA1 of git revision')
    group.add_argument('repo',          help      = 'Name of git repo (e.g. boostorg/hana)')
    return parser.parse_args(args)

def parse_args_install_src(args):
    parser = argparse.ArgumentParser(prog='cppdock install_src')
    group  = parser.add_argument_group('required arguments')
    group.add_argument('branch',        help      = 'SHA1 of git revision')
    group.add_argument('repo',          help      = 'Name of git repo (e.g. llvm-mirror/clang)')
    group.add_argument('dest_dir',      help      = 'Path to copy source files to')
    group  = parser.add_argument_group('optional arguments')
    group.add_argument('src_dir',       nargs='?',
                                        default='.',
                                        help      = 'Path of subdirectory to copy from repo')
    return parser.parse_args(args)

def dispatch(command_args, cli_args):
    command = parse_args_command(command_args).command
    commands = {
        None:           lambda: None,
        'init':         (command_init,          parse_args_init),
        'build':        (command_build,         parse_args_build),
        'dev':          (command_dev,           parse_args_dev),
        'install_dep':  (command_install_dep,   parse_args_install_dep),
        'install_src':  (command_install_src,   parse_args_install_src),
    }
    if command in commands:
        args = commands[command][1](cli_args)
        commands[command][0](args)

def command_init(args):
    load_config_file_with_args(args)

def command_build(args):
    config = load_config_file_with_args(args)

    dockerfile = make_deps_dockerfile(config, args.platform)
    #dockerfile = make_deps_dockerfile_stageless(config, args.platform)
    if args.print_only:
        print dockerfile
    else:
        make_base_image_dockerfile(config, args.platform)
        make_dep_image(config, args.platform, dockerfile)

def command_dev(args):
    config = load_config_file_with_args(args)
    platform_name = args.platform
    make_dev_image(config, platform_name)
    run_dev_image(config, platform_name)

def command_install_dep(args):
    check_sysroot()
    url = make_archive_url(args.repo, args.branch)
    input = urllib2.urlopen(url)
    output = open('dep.zip', 'wr')
    buf = ''
    while True:
        buf = input.read(800)
        output.write(buf)
        output.flush()
        if (len(buf) == 0):
            break
    output.close()

    assert os.path.isfile('dep.zip')
    assert zipfile.is_zipfile('dep.zip')

    zipfile.ZipFile('dep.zip', 'r').extractall()
    recipe = find_recipe(args.platform, args.repo)
    cwd_dir = [x for x in os.listdir('.') if x.endswith(args.branch)][0]
    p = subprocess.Popen([recipe], cwd = cwd_dir)
    p.communicate('')
    if p.returncode != 0:
        print """

    FAILURE: Recipe returned error code {0}.
        """.format(p.returncode)
        sys.exit(1)

def command_install_src(args):
    url = make_archive_url(args.repo, args.branch)
    input = urllib2.urlopen(url)
    output = open('dep.zip', 'wr')
    buf = ''
    while True:
        buf = input.read(800)
        output.write(buf)
        output.flush()
        if (len(buf) == 0):
            break
    output.close()

    assert os.path.isfile('dep.zip')
    assert zipfile.is_zipfile('dep.zip')

    zipfile.ZipFile('dep.zip', 'r').extractall()
    base_src_dir = [x for x in os.listdir('.') if x.endswith(args.branch)][0]
    src_dir = os.path.join(base_src_dir, args.src_dir);
    distutils.dir_util.copy_tree(src_dir, args.dest_dir)
    distutils.dir_util.remove_tree(base_src_dir);

def install_deps_platform(platform, items):
    for i in range(len(items)):
        repo, branch = items[i]
        branch = branch[0:40]
        install_dep(i, platform, repo, branch)

def load_config_file_with_args(args):
    json_file_path = args.json_file_path
    return load_config_file(json_file_path)

def load_config_file(json_file_path):
    if not os.path.isfile(json_file_path):
        print json_file_path
        raise ValueError('Config file not found.')

    stream = file(json_file_path, 'r')
    config = json.load(stream, object_pairs_hook=OrderedDict)

    for sections in config:
        if sections == 'cppdock':
            continue
        for platform, settings in config[sections].items():
            check_base_image_conflict(settings)

            for stage in settings['deps']:
                if not isinstance(stage, list):
                    raise "Each stage in 'deps' must be an array."
                for item in stage:
                    item = lock_item_json(item)

    write_config_file(config, json_file_path)
    return config

def write_config_file(config, json_file_path):
    try:
        with open(json_file_path, 'wb') as fh:
            json.dump(config, fh, indent=2, separators=(',', ': '))
            fh.write('\n')
    except:
        warnings.warn('WARNING: Unable to write to json file')

def lock_item_json(item):
    current_sha = get_current_sha_with_comment(item)
    item.update(revision = current_sha)

    return item

def get_current_sha_with_comment(item):
    repo = item['name']
    tag = item.get('tag')
    source = item.get('source')

    if 'revision' in item:
        return item['revision']
    else:
        if source == 'docker':
            tag = tag or 'latest'
            repo_tag = repo + ":" + tag

            try:
                # pull the image from the registry to get the RepoDigest
                subprocess.check_output(['docker', 'pull', repo_tag])
            except:
                raise RuntimeError("Unable to pull docker image from registry: " + repo_tag )

            try:
                inspect_result =  subprocess.check_output(['docker', 'inspect', repo_tag])
                digest = json.loads(inspect_result)[0]['RepoDigests'][0].split('@')[1]
            except:
                raise RuntimeError("Unable to get SHA from docker image")

            return digest
        else:
            tag = normalize_branch_name(tag)
            lines = subprocess.check_output(['git', 'ls-remote', normalize_repo_name(repo)]).splitlines()
            for line in lines:
                if line.endswith(tag):
                    return line[0:40]
            raise RuntimeError("Unable to get SHA from remote git repository")

def normalize_repo_name(name):
    return default_dep_path + name;

def normalize_branch_name(name):
    if name == None or len(name) == 0 or name == 'HEAD':
        return 'HEAD'
    elif name.startswith('refs/'):
        return name
    else:
        return "refs/heads/" + name

def is_sha(name):
    return len(name) == 40

def check_base_image_conflict(settings):
    if 'base_image' in settings and 'base_image_dockerfile' in settings:
        raise StandardError("Conflicting base image settings detected")

def get_max_key_length(config):
    length = 0
    for section in config.sections():
        for item in config.items(section):
            len_ = len(item[0])
            if (len_ > length):
                length = len_
    return length

def make_archive_url(repo, branch):
    return 'https://github.com/{0}/archive/{1}.zip'.format(repo, branch)

def make_docker_image_digest(repo, branch):
    return '{0}@{1}'.format(repo, branch)

def get_base_image_dockerfile(config, platform_name):
    return config['platforms'][platform_name].get('base_image_dockerfile')

def make_base_image_dockerfile(config, platform_name):
    base_image_dockerfile = get_base_image_dockerfile(config, platform_name)

    if base_image_dockerfile:
        dockerfile = "./{0}".format(base_image_dockerfile)
        tag_name = "{0}_platform:latest".format(get_project_name(config))

        p = subprocess.Popen(['docker', 'build', '--tag=' + tag_name, '--file='+ dockerfile, '.'], stdin=subprocess.PIPE)
        out, err = p.communicate('')

        if p.returncode != 0:
            print """
            FAILURE
            """
 
def find_recipe(platform, repo):
    repo = repo.replace('/', '-')
    local_recipe_path = os.path.expanduser('~') + '/.cppdock_recipes'
    builtin_recipe_path = '/opt/cppdock_recipes'
    repo_with_platform = repo + '-' + platform
    xs = [
        local_recipe_path   + '/' + repo_with_platform,
        local_recipe_path   + '/' + repo,
        local_recipe_path   + '/default',
        builtin_recipe_path + '/' + repo_with_platform,
        builtin_recipe_path + '/' + repo,
        builtin_recipe_path + '/default',
    ]
    for x in xs:
        print "Trying Recipe Location: {0}".format(x)
        if os.path.isfile(x):
            return x
    raise ValueError('Unable to find cppdock recipe: ' + repo_with_platform)

def check_sysroot():
    if not os.path.isdir('/opt/sysroot/'):
        raise ValueError('Sysroot directory is missing: /opt/sysroot/')

def get_arg(args, i):
    next(iter(args[i:i+1]), None)

def get_config_option(config, name):
    defaults = {
        'project': None,
        'platform_linux_x64':     'ricejasonf/cppdock:linux_x64',
        'platform_emscripten':    'ricejasonf/cppdock:emscripten',
        'platform_tvossimulator': 'ricejasonf/cppdock:tvossimulator',
    }
    value = None

    if name in defaults:
        value = defaults[name]
    if value == None:
        raise ValueError('Config option has no default for "{0}"'.format(name))
    return value

def make_dep_image(config, platform_name, dockerfile):
    tag_name = get_build_tag_name(config, platform_name)
    p = subprocess.Popen(['docker', 'build', '--tag=' + tag_name, '--file=-', '.'], stdin=subprocess.PIPE)
    out, err = p.communicate(dockerfile)
    if p.returncode == 0:
        print """

    Finished building {0}.
        """.format(tag_name)
    else:
        print """

    FAILURE: Build of {0} FAILED.
        """.format(tag_name)
        sys.exit(1)

def get_platform_type(config, platform_name):
    try:
        return config['platforms'][platform_name]['type']
    except:
        raise ValueError('Platform name `{0}` not found.'.format(platform_name))

def get_project_name(config):
    return config['cppdock']['name']

def make_deps_dockerfile(config, platform_name):
    platform_type = get_platform_type(config, platform_name)
    cppdock_image = get_base_image(config, platform_name) or get_config_option(config, 'platform_' + platform_type)
    deps = get_deps_from_config(config, platform_name)
    deps_stages = ''
    deps_imports = ''

    for dep in deps:
        deps_stages += string.join([make_deps_stage(cppdock_image, platform_name, dep)])
        deps_imports += make_deps_import(platform_name, dep[-1][2])

    return """
{0}
FROM {1}
{2}
""".format(deps_stages, cppdock_image, deps_imports)

def get_base_image(config, platform_name):
    if 'base_image_dockerfile' in config['platforms'][platform_name]:
        return '{0}_platform'.format(get_project_name(config))
    else:
        return config['platforms'][platform_name].get('base_image')

# deprecated
def make_deps_dockerfile_stageless(config, platform):
    cppdock_image  = get_config_option(config, 'platform_' + platform)
    deps = get_deps_from_config(config, platform)
    deps_stages = string.join([make_install_dep(x, y, z) for x, y, z in deps])

    return """
FROM {0} as build_all
{1}

FROM {2}

    COPY --from=build_all /opt/install /opt/sysroot
""".format(cppdock_image, deps_stages, cppdock_image)

def make_deps_stage(cppdock_image, platform_name, deps):
    copy_recipes_term = ""
    build_image = cppdock_image
    #if os.path.isdir(root_path + '/cppdock_recipes'):
    #    copy_recipes_term = "COPY cppdock_recipes /opt/cppdock_recipes/" 

    docker_image_digest = get_stage_docker_image_digest(deps)

    install_deps = string.join([make_install_dep(x, y, z) for x, y, z in deps])
    branch = deps[-1][2].replace('/', '_')

    if not docker_image_digest == None:
        build_image = docker_image_digest

    return """
FROM {0} as build_{2}_{1}
    {4}
    WORKDIR /usr/local/src
    {3}
""".format(build_image, platform_name, branch, install_deps, copy_recipes_term)

def get_stage_docker_image_digest(stage):
    for item in stage:
        if not is_sha(item[1]):
            return make_docker_image_digest(item[2], item[1])
    return None

def make_install_dep(platform, branch, repo):
    if not is_sha(branch):
        return ''
    repo_recipe_prefix = repo.replace('/', '-')
    copy_local_recipe = ''
    if os.path.isfile(os.path.join(root_path, 'cppdock_recipes', repo_recipe_prefix + '-' + platform)):
        copy_local_recipe = """
    COPY cppdock_recipes/{0}-{1} /opt/cppdock_recipes/""".format(repo_recipe_prefix, platform)
    elif os.path.isfile(os.path.join(root_path, 'cppdock_recipes', repo_recipe_prefix)):
        copy_local_recipe = """
    COPY cppdock_recipes/{0} /opt/cppdock_recipes/""".format(repo_recipe_prefix)

    return """{3}
    RUN cppdock install_dep {0} {1} {2}""".format(platform, branch, repo, copy_local_recipe)

def make_deps_import(platform, branch):
    return """
    COPY --from=build_{1}_{0} /opt/install/ /opt/sysroot""".format(platform, branch.replace('/', '_'))

def get_deps_from_config(config, platform_name):
    platform = config['platforms'][platform_name]

    return [get_deps_stage_items(stage, platform['type']) for stage in platform['deps']]
    
    raise ValueError('Platform is not specified in cppdock json file')

def get_deps_stage_items(deps_stage, platform_type):
    return [(platform_type, item['revision'],  item['name']) for item in deps_stage]
#
#def get_dep_dir_name(repo, branch):
#    return '{0}-{1}'.format(repo.split('/').pop(), branch)

def make_dev_image(config, platform_name):
    build_tag_name = get_build_tag_name(config, platform_name)
    dev_tag_name = get_dev_tag_name(config, platform_name)
    build_type = os.environ.get('BUILD_TYPE', None) or default_build_type(config, platform_name)
    dockerfile = """
FROM {0}
    WORKDIR /opt/build
    CMD cmake \
        -DCMAKE_BUILD_TYPE={1} \
        -DCMAKE_TOOLCHAIN_FILE='/opt/toolchain.cmake' \
        /opt/src \
        && /bin/bash
""".format(build_tag_name, build_type)

    p = subprocess.Popen(['docker', 'build', '--tag=' + dev_tag_name, '--file=-', '.'], stdin=subprocess.PIPE)
    out, err = p.communicate(dockerfile)
    if p.returncode == 0:
        print """

    Finished building {0}.
        """.format(dev_tag_name)
    else:
        print """

    FAILURE: Build of {0} FAILED.
        """.format(dev_tag_name)
        sys.exit(1)

def run_dev_image(config, platform_name):
    tag_name = get_dev_tag_name(config, platform_name)
    pwd = os.getcwd()
    os.system('docker run --rm -it --mount type=bind,source=' + pwd + ',target=/opt/src,readonly ' + tag_name)

def get_build_tag_name(config, platform_name):
    return "{0}_build:{1}".format(
        get_project_name(config),
        platform_name
    )

def get_dev_tag_name(config, platform_name):
    return "{0}_dev:{1}".format(
        get_project_name(config),
        platform_name
    )

def get_project_name(config):
    try:
        return config['cppdock']['name']
    except:
        raise ValueError('Project name not found in cppdock.json.')

def default_build_type(config, platform_name):
    if config['platforms'][platform_name]['type'] == 'emscripten' :
        return 'Release'
    else:
        return 'Debug'
        

dispatch(os.sys.argv[1:2], os.sys.argv[2:])
